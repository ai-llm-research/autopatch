{
  "cwe_type": "Unchecked Return Value",
  "cve_id": "CVE-2024-58075",
  "supplementary_code": "```c\nstruct ahash_request {\nstruct crypto_async_request base;\nunsigned int nbytes;\nstruct scatterlist *src;\nu8 *result;\n/* This field may only be used by the ahash API code. */\nvoid *priv;\nvoid *__ctx[] CRYPTO_MINALIGN_ATTR;\n};\n```\n```c\nstruct crypto_ahash {\nbool using_shash; /* Underlying algorithm is shash, not ahash */\nunsigned int statesize;\nunsigned int reqsize;\nstruct crypto_tfm base;\n};\n```\n```c\nstatic inline struct crypto_ahash *crypto_ahash_reqtfm(\nstruct ahash_request *req)\n{\nreturn __crypto_ahash_cast(req->base.tfm);\n}\n```\n```c\nstruct tegra_cmac_ctx {\nstruct tegra_se *se;\nunsigned int alg;\nu32 key_id;\nstruct crypto_shash *fallback_tfm;\n};\n```\n```c\nstatic inline void *crypto_ahash_ctx(struct crypto_ahash *tfm)\n{\nreturn crypto_tfm_ctx(crypto_ahash_tfm(tfm));\n}\n```\n```c\nstruct tegra_cmac_reqctx {\nstruct scatterlist *src_sg;\nstruct tegra_se_datbuf datbuf;\nstruct tegra_se_datbuf residue;\nunsigned int total_len;\nunsigned int blk_size;\nunsigned int task;\nu32 crypto_config;\nu32 config;\nu32 key_id;\nu32 *iv;\nu32 result[CMAC_RESULT_REG_COUNT];\n};\n```\n```c\nstatic inline void *ahash_request_ctx(struct ahash_request *req)\n{\nreturn req->__ctx;\n}\n```\n```c\nstatic int tegra_cmac_init(struct ahash_request *req)\n{\nstruct tegra_cmac_reqctx *rctx = ahash_request_ctx(req);\nstruct crypto_ahash *tfm = crypto_ahash_reqtfm(req);\nstruct tegra_cmac_ctx *ctx = crypto_ahash_ctx(tfm);\nstruct tegra_se *se = ctx->se;\nint i;\nrctx->total_len = 0;\nrctx->datbuf.size = 0;\nrctx->residue.size = 0;\nrctx->task = SHA_FIRST;\nrctx->blk_size = crypto_ahash_blocksize(tfm);\nrctx->residue.buf = dma_alloc_coherent(se->dev, rctx->blk_size * 2,\n&rctx->residue.addr, GFP_KERNEL);\nif (!rctx->residue.buf)\ngoto resbuf_fail;\nrctx->residue.size = 0;\nrctx->datbuf.buf = dma_alloc_coherent(se->dev, SE_SHA_BUFLEN,\n&rctx->datbuf.addr, GFP_KERNEL);\nif (!rctx->datbuf.buf)\ngoto datbuf_fail;\nrctx->datbuf.size = 0;\n/* Clear any previous result */\nfor (i = 0; i < CMAC_RESULT_REG_COUNT; i++)\nwritel(0, se->base + se->hw->regs->result + (i * 4));\nreturn 0;\ndatbuf_fail:\ndma_free_coherent(se->dev, rctx->blk_size, rctx->residue.buf,\nrctx->residue.addr);\nresbuf_fail:\nreturn -ENOMEM;\n}\n```\n```c\nint crypto_transfer_hash_request_to_engine(struct crypto_engine *engine,\nstruct ahash_request *req)\n{\nreturn crypto_transfer_request_to_engine(engine, &req->base);\n}\nEXPORT_SYMBOL_GPL(crypto_transfer_hash_request_to_engine);\n```",
  "original_code": "```c\nstatic int tegra_cmac_digest(struct ahash_request *req)\n{\nstruct crypto_ahash *tfm = crypto_ahash_reqtfm(req);\nstruct tegra_cmac_ctx *ctx = crypto_ahash_ctx(tfm);\nstruct tegra_cmac_reqctx *rctx = ahash_request_ctx(req);\ntegra_cmac_init(req);\nrctx->task |= SHA_UPDATE | SHA_FINAL;\nreturn crypto_transfer_hash_request_to_engine(ctx->se->engine, req);\n}\n```",
  "vuln_patch": "```c\nstatic int tegra_cmac_digest(struct ahash_request *req)\n{\nstruct crypto_ahash *tfm = crypto_ahash_reqtfm(req);\nstruct tegra_cmac_ctx *ctx = crypto_ahash_ctx(tfm);\nstruct tegra_cmac_reqctx *rctx = ahash_request_ctx(req);\nint ret;\nret = tegra_cmac_init(req);\nif (ret)\nreturn ret;\nrctx->task |= SHA_UPDATE | SHA_FINAL;\nreturn crypto_transfer_hash_request_to_engine(ctx->se->engine, req);\n}\n```",
  "function_name": "tegra_cmac_digest",
  "function_prototype": "static int tegra_cmac_digest(struct ahash_request *req)",
  "code_semantics": "The target code sets up and initiates a cryptographic hash operation. It extracts context information from the provided request structure, initializes the request context by setting up buffers and clearing previous results, updates the task to indicate an update and finalization of the hash operation, and hands off the request to a cryptographic engine for computation.",
  "safe_verification_cot": "1. The function tegra_cmac_init(req) is called, and its return value is stored in the variable ret. 2. The return value ret is checked immediately after the call to tegra_cmac_init(req). 3. If tegra_cmac_init(req) fails, the function tegra_cmac_digest returns the error code, preventing further execution and avoiding the call to crypto_transfer_hash_request_to_engine with an uninitialized context.",
  "verification_cot": "1. The function tegra_cmac_init(req) is called, but its return value is not checked. 2. If tegra_cmac_init(req) fails, the function tegra_cmac_digest continues execution without handling the error. 3. The unchecked return value can lead to the function crypto_transfer_hash_request_to_engine being called with an improperly initialized context, potentially causing undefined behavior or security issues.",
  "vulnerability_related_variables": {
    "req": "This entity serves as a container for cryptographic request data, which includes information about the source data, the result buffer, and any private data needed for processing. It is used to initialize context structures and to facilitate the transfer of the cryptographic request to a processing engine.",
    "rctx": "This entity acts as a context for a cryptographic operation, storing intermediate data and configuration settings necessary for processing. It is initialized with default values and updated with specific task flags to indicate the stages of the cryptographic operation."
  },
  "vulnerability_related_functions": {
    "tegra_cmac_init": "This function initializes a context for a cryptographic operation. It sets initial values for various fields in the context, allocates memory for buffers, and clears any previous results from hardware registers. If memory allocation fails, it performs cleanup and returns an error code.",
    "crypto_transfer_hash_request_to_engine": "This function transfers a cryptographic request to a processing engine. It takes a request and an engine as inputs and uses a helper function to perform the transfer."
  },
  "root_cause": "The root cause of CVE-2024-58075 is the unchecked return value of the tegra_cmac_init(req) function, which can lead to the continuation of execution even when initialization fails.",
  "patch_cot": "Introduce a new integer variable to store the return value of tegra_cmac_init(req). After calling tegra_cmac_init(req), immediately check if the return value indicates an error (non-zero). If an error is detected, return the error code immediately to prevent further execution. This ensures that the function does not proceed with potentially uninitialized or invalid data, thus mitigating the vulnerability."
}