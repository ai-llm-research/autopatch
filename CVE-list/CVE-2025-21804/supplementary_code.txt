```c
struct rcar_pcie_endpoint {
    struct rcar_pcie    pcie;
    phys_addr_t     *ob_mapped_addr;
    struct pci_epc_mem_window *ob_window;
    u8          max_functions;
    unsigned int        bar_to_atu[MAX_NR_INBOUND_MAPS];
    unsigned long       *ib_window_map;
    u32         num_ib_windows;
    u32         num_ob_windows;
};
```

```c
struct platform_device {
    const char  *name;
    int     id;
    bool        id_auto;
    struct device   dev;
    u64     platform_dma_mask;
    struct device_dma_parameters dma_parms;
    u32     num_resources;
    struct resource *resource;

    const struct platform_device_id *id_entry;
    /*
     * Driver name to force a match.  Do not set directly, because core
     * frees it.  Use driver_set_override() to set or clear it.
     */
    const char *driver_override;

    /* MFD cell pointer */
    struct mfd_cell *mfd_cell;

    /* arch specific additions */
    struct pdev_archdata    archdata;
};
```

```c
struct rcar_pcie {
    struct device       *dev;
    void __iomem        *base;
};
```

```c
struct resource {
    resource_size_t start;
    resource_size_t end;
    const char *name;
    unsigned long flags;
    unsigned long desc;
    struct resource *parent, *sibling, *child;
};
```

```c
#define RCAR_PCI_MAX_RESOURCES  4
```

```c
#define IORESOURCE_MEM      0x00000200
```

```c
#define EINVAL      22  /* Invalid argument */
#define EIO      5  /* I/O error */
```

```c
#define devm_request_mem_region(dev,start,n,name) \
    __devm_request_region(dev, &iomem_resource, (start), (n), (name))
```

```c
static inline resource_size_t resource_size(const struct resource *res)
{
    return res->end - res->start + 1;
}
```

```c
#define dev_err(dev, fmt, ...) \
    dev_printk_index_wrap(_dev_err, KERN_ERR, dev, dev_fmt(fmt), ##__VA_ARGS__)
```

```c
static inline resource_size_t resource_size(const struct resource *res)
{
    return res->end - res->start + 1;
}
```
