```c
struct squashfs_base_inode {
    __le16          inode_type;
    __le16          mode;
    __le16          uid;
    __le16          guid;
    __le32          mtime;
    __le32          inode_number;
};
```

```c
#define SQFS_MAGIC_NUMBER 0x73717368
/* The three first members of squashfs_dir_index make a total of 12 bytes */
#define SQFS_DIR_INDEX_BASE_LENGTH 12
/* size of metadata (inode and directory) blocks */
#define SQFS_METADATA_BLOCK_SIZE 8192
/* Max. number of fragment entries in a metadata block is 512 */
#define SQFS_MAX_ENTRIES 512
/* Metadata blocks start by a 2-byte length header */
#define SQFS_HEADER_SIZE 2
#define SQFS_DIR_HEADER_SIZE 12
#define SQFS_MISC_ENTRY_TYPE -1
#define SQFS_EMPTY_FILE_SIZE 3
#define SQFS_STOP_READDIR 1
#define SQFS_EMPTY_DIR -1

/*
 * A directory entry object has a fixed length of 8 bytes, corresponding to its
 * first four members, plus the size of the entry name, which is equal to
 * 'entry_name' + 1 bytes.
 */
#define SQFS_ENTRY_BASE_LENGTH 8
/* Inode types */
#define SQFS_DIR_TYPE 1
#define SQFS_REG_TYPE 2
#define SQFS_SYMLINK_TYPE 3
#define SQFS_BLKDEV_TYPE 4
#define SQFS_CHRDEV_TYPE 5
#define SQFS_FIFO_TYPE 6
#define SQFS_SOCKET_TYPE 7
#define SQFS_LDIR_TYPE 8
#define SQFS_LREG_TYPE 9
#define SQFS_LSYMLINK_TYPE 10
#define SQFS_LBLKDEV_TYPE 11
#define SQFS_LCHRDEV_TYPE 12
#define SQFS_LFIFO_TYPE 13
#define SQFS_LSOCKET_TYPE 14
```

```c
struct squashfs_dir_inode {
    __le16          inode_type;
    __le16          mode;
    __le16          uid;
    __le16          guid;
    __le32          mtime;
    __le32          inode_number;
    __le32          start_block;
    __le32          nlink;
    __le16          file_size;
    __le16          offset;
    __le32          parent_inode;
};
```

```c
struct squashfs_reg_inode {
    __le16          inode_type;
    __le16          mode;
    __le16          uid;
    __le16          guid;
    __le32          mtime;
    __le32          inode_number;
    __le32          start_block;
    __le32          fragment;
    __le32          offset;
    __le32          file_size;
    __le16          block_list[0];
};
```

```c
#define SQFS_IS_FRAGMENTED(A) ((A) != 0xFFFFFFFF)
```

```c
struct squashfs_ldir_inode {
    __le16          inode_type;
    __le16          mode;
    __le16          uid;
    __le16          guid;
    __le32          mtime;
    __le32          inode_number;
    __le32          nlink;
    __le32          file_size;
    __le32          start_block;
    __le32          parent_inode;
    __le16          i_count;
    __le16          offset;
    __le32          xattr;
    struct squashfs_dir_index   index[0];
}; 
```

```c
struct squashfs_directory_index {
	u32 index;
	u32 start;
	u32 size;
	char name[0];
};
```

```c
struct squashfs_lreg_inode {
	__le16 inode_type;
	__le16 mode;
	__le16 uid;
	__le16 guid;
	__le32 mtime;
	__le32 inode_number;
	__le64 start_block;
	__le64 file_size;
	__le64 sparse;
	__le32 nlink;
	__le32 fragment;
	__le32 offset;
	__le32 xattr;
	__le32 block_list[0];
};
```

```c
struct squashfs_symlink_inode {
	__le16 inode_type;
	__le16 mode;
	__le16 uid;
	__le16 guid;
	__le32 mtime;
	__le32 inode_number;
	__le32 nlink;
	__le32 symlink_size;
	char symlink[0];
};
```

```c
struct squashfs_dev_inode {
	__le16 inode_type;
	__le16 mode;
	__le16 uid;
	__le16 guid;
	__le32 mtime;
	__le32 inode_number;
	__le32 nlink;
	__le32 rdev;
};
```

```c
struct squashfs_ldev_inode {
	__le16 inode_type;
	__le16 mode;
	__le16 uid;
	__le16 guid;
	__le32 mtime;
	__le32 inode_number;
	__le32 nlink;
	__le32 rdev;
	__le32 xattr;
};
```

```c
struct squashfs_ipc_inode {
	__le16 inode_type;
	__le16 mode;
	__le16 uid;
	__le16 guid;
	__le32 mtime;
	__le32 inode_number;
	__le32 nlink;
};
```

```c
struct squashfs_lipc_inode {
	__le16 inode_type;
	__le16 mode;
	__le16 uid;
	__le16 guid;
	__le32 mtime;
	__le32 inode_number;
	__le32 nlink;
	__le32 xattr;
};
```