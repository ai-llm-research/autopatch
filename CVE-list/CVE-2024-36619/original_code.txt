```c
static int decode_5elp(AVCodecContext *avctx,
                       WavArcContext *s, GetBitContext *gb)
{
    int ch, finished, fill, correlated, order = 0;

    ch = 0;
    finished = 0;
    while (!finished) {
        int *samples = s->samples[ch];
        int *ac_pred = s->ac_pred;
        int *ac_out = s->ac_out;
        int k, block_type;

        if (get_bits_left(gb) <= 0)
            return AVERROR_INVALIDDATA;

        memset(s->ac_out, 0, sizeof(s->ac_out));

        block_type = get_urice(gb, 1);
        av_log(avctx, AV_LOG_DEBUG, "block_type : %d\n", block_type);

        if(block_type != 6)
            return AVERROR_INVALIDDATA;

        k = 1 + (avctx->sample_fmt == AV_SAMPLE_FMT_S16P);
        k = get_urice(gb, k) + 1;
        if (k >= 32)
            return AVERROR_INVALIDDATA;
    
        order = get_urice(gb, 2);
        if ((unsigned)order > FF_ARRAY_ELEMS(s->filter[ch]))
            return AVERROR_INVALIDDATA;
        for (int o = 0; o < order; o++)
            s->filter[ch][o] = get_srice(gb, 2);

        for (int n = 0; n < s->nb_samples; n++)
            samples[n + 70] = get_srice(gb, k);
    
        for (int n = 0; n < 70; n++) {
            ac_pred[n] = samples[n];
            samples[n] = 0;
        }

        for (int n = 0; n < s->nb_samples; n++) {
            int sum = 15;

            for (int o = 0; o < order; o++)
                sum += s->filter[ch][o] * (unsigned)samples[n + 70 - o - 1];

            samples[n + 70] += ac_out[n] + (sum >> 4);
        }

        for (int n = 0; n < 70; n++)
            samples[n] = ac_pred[n];

        for (int n = 0; n < s->nb_samples; n++)
            samples[n + 70] += ac_out[n] + samples[n + 69] * 3U - samples[n + 68] * 3U + samples[n + 67];

        finished = 1;


        if (finished == 1 && avctx->ch_layout.nb_channels == 2) {
            if (ch == 0)
                correlated = get_bits1(gb);
            finished = ch != 0;
            do_stereo(s, ch, correlated, 70);
            ch = 1;
        }
    }

    if (avctx->ch_layout.nb_channels == 1) {
        for (int n = 0; n < 70; n++)
            s->samples[0][n] = s->samples[0][s->nb_samples + n];
    }

    return 0;
}
```