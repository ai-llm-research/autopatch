```c
struct hns_roce_dev {
    struct ib_device    ib_dev;
    struct pci_dev      *pci_dev;
    struct device       *dev;
    struct hns_roce_uar     priv_uar;
    const char      *irq_names[HNS_ROCE_MAX_IRQ_NUM];
    spinlock_t      sm_lock;
    bool            active;
    bool            is_reset;
    bool            dis_db;
    unsigned long       reset_cnt;
    struct hns_roce_ib_iboe iboe;
    enum hns_roce_device_state state;
    struct list_head    qp_list; /* list of all qps on this dev */
    spinlock_t      qp_list_lock; /* protect qp_list */

    struct list_head        pgdir_list;
    struct mutex            pgdir_mutex;
    int         irq[HNS_ROCE_MAX_IRQ_NUM];
    u8 __iomem      *reg_base;
    void __iomem        *mem_base;
    struct hns_roce_caps    caps;
    struct xarray       qp_table_xa;

    unsigned char   dev_addr[HNS_ROCE_MAX_PORTS][ETH_ALEN];
    u64         sys_image_guid;
    u32                     vendor_id;
    u32                     vendor_part_id;
    u32                     hw_rev;
    void __iomem            *priv_addr;

    struct hns_roce_cmdq    cmd;
    struct hns_roce_ida pd_ida;
    struct hns_roce_ida xrcd_ida;
    struct hns_roce_ida uar_ida;
    struct hns_roce_mr_table  mr_table;
    struct hns_roce_cq_table  cq_table;
    struct hns_roce_srq_table srq_table;
    struct hns_roce_qp_table  qp_table;
    struct hns_roce_eq_table  eq_table;
    struct hns_roce_hem_table  qpc_timer_table;
    struct hns_roce_hem_table  cqc_timer_table;
    /* GMV is the memory area that the driver allocates for the hardware
     * to store SGID, SMAC and VLAN information.
     */
    struct hns_roce_hem_table  gmv_table;

    int         cmd_mod;
    int         loop_idc;
    u32         sdb_offset;
    u32         odb_offset;
    const struct hns_roce_hw *hw;
    void            *priv;
    struct workqueue_struct *irq_workq;
    struct work_struct ecc_work;
    u32 func_num;
    u32 is_vf;
    u32 cong_algo_tmpl_id;
    u64 dwqe_page;
    struct hns_roce_dev_debugfs dbgfs;
    atomic64_t *dfx_cnt;
};
```

```c
struct hns_roce_hem_list {
    struct list_head root_bt;
    /* link all bt dma mem by hop config */
    struct list_head mid_bt[HNS_ROCE_MAX_BT_REGION][HNS_ROCE_MAX_BT_LEVEL];
    struct list_head btm_bt; /* link all bottom bt in @mid_bt */
    dma_addr_t root_ba; /* pointer to the root ba table */
};
```

```c
struct list_head {
    struct list_head *next, *prev;
};
```

```c
struct hns_roce_hem_item {
    struct list_head list; /* link all hems in the same bt level */
    struct list_head sibling; /* link all hems in last hop for mtt */
    void *addr;
    dma_addr_t dma_addr;
    size_t count; /* max ba numbers */
    int start; /* start buf offset in this hem */
    int end; /* end buf offset in this hem */
};
```

```c
#define list_for_each_entry_safe(pos, n, head, member)          \
    for (pos = list_first_entry(head, typeof(*pos), member),    \
        n = list_next_entry(pos, member);           \
         !list_entry_is_head(pos, head, member);            \
         pos = n, n = list_next_entry(n, member))
```

```c
#define BA_BYTE_LEN             8
```
