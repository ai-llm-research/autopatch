```c
/*
 * An OSSL_RECORD_LAYER is just an externally defined opaque pointer created by
 * the method
 */
typedef struct ossl_record_layer_st OSSL_RECORD_LAYER;

struct ossl_record_layer_st {
    QUIC_TLS *qtls;

    /* Protection level */
    int level;

    /* Only used for retry flags */
    BIO *dummybio;

    /* Number of bytes written so far if we are part way through a write */
    size_t written;

    /* If we are part way through a write, a copy of the template */
    OSSL_RECORD_TEMPLATE template;

    /*
     * If we hit an error, what alert code should be used
     */
    int alert;

    /* Amount of crypto stream data we read in the last call to quic_read_record */
    size_t recread;

    /* Amount of crypto stream data read but not yet released */
    size_t recunreleased;

    /* Callbacks */
    OSSL_FUNC_rlayer_msg_callback_fn *msg_callback;
    void *cbarg;
};
```

```c
# define OSSL_RECORD_DIRECTION_WRITE 1
```

```c
#define TLS_BUFFER_get_left(b)             ((b)->left)
```

```c
# define SSL_ST_READ_BODY                        0xF1
```

```c
static int tls_release_read_buffer(OSSL_RECORD_LAYER *rl)
{
    TLS_BUFFER *b;

    b = &rl->rbuf;
    if ((rl->options & SSL_OP_CLEANSE_PLAINTEXT) != 0)
        OPENSSL_cleanse(b->buf, b->len);
    OPENSSL_free(b->buf);
    b->buf = NULL;
    return 1;
}
```