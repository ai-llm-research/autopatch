```c
struct generic_pm_domain {
    struct device dev;
    struct dev_pm_domain domain;    /* PM domain operations */
    struct list_head gpd_list_node; /* Node in the global PM domains list */
    struct list_head parent_links;  /* Links with PM domain as a parent */
    struct list_head child_links;   /* Links with PM domain as a child */
    struct list_head dev_list;  /* List of devices */
    struct dev_power_governor *gov;
    struct genpd_governor_data *gd; /* Data used by a genpd governor. */
    struct work_struct power_off_work;
    struct fwnode_handle *provider; /* Identity of the domain provider */
    bool has_provider;
    const char *name;
    atomic_t sd_count;  /* Number of subdomains with power "on" */
    enum gpd_status status; /* Current state of the domain */
    unsigned int device_count;  /* Number of devices */
    unsigned int device_id;     /* unique device id */
    unsigned int suspended_count;   /* System suspend device counter */
    unsigned int prepared_count;    /* Suspend counter of prepared devices */
    unsigned int performance_state; /* Aggregated max performance state */
    cpumask_var_t cpus;     /* A cpumask of the attached CPUs */
    bool synced_poweroff;       /* A consumer needs a synced poweroff */
    int (*power_off)(struct generic_pm_domain *domain);
    int (*power_on)(struct generic_pm_domain *domain);
    struct raw_notifier_head power_notifiers; /* Power on/off notifiers */
    struct opp_table *opp_table;    /* OPP table of the genpd */
    int (*set_performance_state)(struct generic_pm_domain *genpd,
                     unsigned int state);
    struct gpd_dev_ops dev_ops;
    int (*set_hwmode_dev)(struct generic_pm_domain *domain,
                  struct device *dev, bool enable);
    bool (*get_hwmode_dev)(struct generic_pm_domain *domain,
                  struct device *dev);
    int (*attach_dev)(struct generic_pm_domain *domain,
              struct device *dev);
    void (*detach_dev)(struct generic_pm_domain *domain,
               struct device *dev);
    unsigned int flags;     /* Bit field of configs for genpd */
    struct genpd_power_state *states;
    void (*free_states)(struct genpd_power_state *states,
                unsigned int state_count);
    unsigned int state_count; /* number of states */
    unsigned int state_idx; /* state that genpd will go to when off */
    u64 on_time;
    u64 accounting_time;
    const struct genpd_lock_ops *lock_ops;
    union {
        struct mutex mlock;
        struct {
            spinlock_t slock;
            unsigned long lock_flags;
        };
        struct {
            raw_spinlock_t raw_slock;
            unsigned long raw_lock_flags;
        };
    };
};
```

```c
typedef struct spinlock {
    union {
        struct raw_spinlock rlock;

#ifdef CONFIG_DEBUG_LOCK_ALLOC
# define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map))
        struct {
            u8 __padding[LOCK_PADSIZE];
            struct lockdep_map dep_map;
        };
#endif
    };
} spinlock_t;
```

```c
struct mmp_pm_domain {
    struct generic_pm_domain genpd;
    void __iomem *reg;
    spinlock_t *lock;
    u32 power_on;
    u32 reset;
    u32 clock_enable;
    unsigned int flags;
};
```

```c
#define kzalloc(...)                alloc_hooks(kzalloc_noprof(__VA_ARGS__))
```

```c
#define GFP_KERNEL  (__GFP_RECLAIM | __GFP_IO | __GFP_FS)
```

```c
static inline void * __must_check ERR_PTR(long error)
{
    return (void *) error;
}
```

```c
#define ENOMEM      12  /* Out of memory */
```

```c
static inline int pm_genpd_init(struct generic_pm_domain *genpd,
                struct dev_power_governor *gov, bool is_off)
{
    return -ENOSYS;
}
```
